#! /bin/sh
### BEGIN INIT INFO
# Provides: oerttrprd61-openerp-cron-worker
# Required-Start: $syslog pre-openerp
# Required-Stop: $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: OpenERP Server - the server
# Description: OpenERP is a complete ERP and CRM software
### END INIT INFO
USER=oerttrprd61
CONFIGFILE="/etc/openerp/$USER.cfg"
PIDFILE=/var/run/openerp/$USER.pid
DAEMON=/home/$USER/bzr/oe_technotrading/gunicorn/openerp-cron-worker

PATH=/sbin:/user/sbin:/bin:/usr/bin
DESC=openerp-cron-worker
NAME=openerp-cron-worker

if [ -e "/home/$USER/python-env" ]; then
    . /home/$USER/python-env
fi

# you can define EXTRAOPTS when restarting the server, e.g.
# EXTRAOPTS=" -d hrm3 -u hr_deluxe,hr_deluxe_nn " /etc/init.d/oervwnhrmdev2 restart

DAEMON_OPTS=""

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 1
[ -f $CONFIGFILE ] || exit 1
checkpid() {
    [ -f $PIDFILE ] || return 1
    pid=`cat $PIDFILE`
    [ -d /proc/$pid ] && return 0
    return 1
}
# function that starts the daemon/service
#
if [ -f /lib/lsb/init-functions ] || [ -f /etc/gentoo-release ] ; then
    do_start() {
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
	    --chuid $USER --background --make-pidfile \
	    --exec $DAEMON -- $DAEMON_OPTS
	RETVAL=$?
	chmod g+w "$PIDFILE"
	sleep 5 # wait for few seconds
	return $RETVAL
    }
#
# Function that stops the daemon/service
    do_stop() {
	start-stop-daemon --stop --quiet --pidfile $PIDFILE --oknodo
	RETVAL=$?
	sleep 2 # wait for few seconds
	rm -f $PIDFILE # remove pidfile
	return $RETVAL
    }
    do_restart() {
	start-stop-daemon --stop --quiet --pidfile $PIDFILE --oknodo
	sleep 2 # wait for few seconds
	rm -f $PIDFILE # remove pidfile
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
	    --chuid $USER --background --make-pidfile \
	    --exec $DAEMON -- $DAEMON_OPTS
	RETVAL=$?
	sleep 5 # wait for few seconds
	return $RETVAL
    }
else
    do_start() {
	$DAEMON $DAEMON_OPTS > /dev/null 2>&1 &
	RETVAL=$?
	sleep 5 # wait for few seconds
	echo $! > $PIDFILE # create pidfile
	return $RETVAL
    }
    do_stop() {
	pid=`cat $PIDFILE`
	kill -15 $pid
	RETVAL=$?
	sleep 2 # wait for few seconds
	rm -f $PIDFILE # remove pidfile
	return $RETVAL
    }
    do_restart() {
	if [ -f $PIDFILE ]; then
	    do_stop
	fi
	do_start
	return $?
    }
fi
start_daemon() {
    if [ -f $PIDFILE ]; then
	echo "pidfile already exists: $PIDFILE"
	exit 1
    fi
    echo -n "Starting $DESC: "
    do_start
    checkpid
    if [ $? -eq 1 ]; then
	rm -f $PIDFILE
	echo "failed."
	exit 1
    fi
    echo "done."
}
stop_daemon() {
    checkpid
    if [ $? -eq 1 ]; then
	exit 0
    fi
    echo -n "Stopping $DESC: "
    do_stop
    if [ $? -eq 1 ]; then
	echo "failed."
	exit 1
    fi
    echo "done."
}
restart_daemon() {
    echo -n "Reloading $DESC: "
    do_restart
    checkpid
    if [ $? -eq 1 ]; then
	rm -f $PIDFILE
	echo "failed."
	exit 1
    fi
    echo "done."
}
status_daemon() {
    echo -n "Checking $DESC: "
    checkpid
    if [ $? -eq 1 ]; then
	echo "stopped."
    else
	echo "running."
    fi
}
case "$1" in
    start) start_daemon ;;
    stop) stop_daemon ;;
    restart|force-reload) restart_daemon ;;
    status) status_daemon ;;
    upgrade) upgrade_daemon ;;
    *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
	exit 1
	;;
esac
exit 0
# vim: sts=4 st=4 et
