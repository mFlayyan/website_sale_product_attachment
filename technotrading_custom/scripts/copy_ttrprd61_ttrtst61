#!/bin/sh

prod_user=oerttrprd61
test_user=oerttrtst61
prod_db=technotrading
test_db=test61

sudo -u $test_user /etc/init.d/$test_user stop
sudo -u $test_user psql -c "drop database $test_db" template1
sudo -u $test_user psql -c "create database $test_db" template1
sudo -u $prod_user pg_dump --format=c $prod_db | sudo -u $test_user pg_restore --no-owner --dbname=$test_db
sudo -u $test_user psql -c "update ir_cron set active=False" $test_db
sudo -u $test_user /etc/init.d/$test_user start

sleep 5
python <<HEREDOC
import xmlrpclib
import os
import datetime

pwd=os.popen('echo "select password from res_users where login=\'admin\'" | sudo -u $test_user psql --quiet --tuples-only --no-align $test_db').read()
pwd=pwd.splitlines()[0]

db="$test_db"

print "logging in "+db
sock = xmlrpclib.ServerProxy('http://localhost:8119/xmlrpc/common')
uid = sock.login(db,"admin",pwd)
sock = xmlrpclib.ServerProxy('http://localhost:8119/xmlrpc/object', use_datetime=True)
print "updating module list"
sock.execute(db, uid, pwd, 'ir.module.module', 'update_list')
print "updating external_referentials module"
modules=sock.execute(db, uid, pwd, 'ir.module.module', 'search', [('name', '=', 'base_external_referentials')])
try:
    sock.execute(db, uid, pwd, 'ir.module.module', 'button_install', modules)
    sock.execute(db, uid, pwd, 'base.module.upgrade', 'upgrade_module', modules)
except Exception:
    sock = xmlrpclib.ServerProxy('http://localhost:8119/xmlrpc/common')
    uid = sock.login(db,"admin",pwd)
    sock = xmlrpclib.ServerProxy('http://localhost:8119/xmlrpc/object', use_datetime=True)
print "installing new dependencies"
modules=sock.execute(db, uid, pwd, 'ir.module.module', 'search', [('name', 'in', ['base_file_protocole', 'framework_helpers', 'base_sale_export_product', 'product_links_sync'])])
sock.execute(db, uid, pwd, 'ir.module.module', 'button_immediate_install', modules)
print "updating ecommerce modules"
modules=sock.execute(db, uid, pwd, 'ir.module.module', 'search', [('name', '=', 'base_external_referentials', )])
sock.execute(db, uid, pwd, 'ir.module.module', 'button_upgrade', modules)
sock.execute(db, uid, pwd, 'base.module.upgrade', 'upgrade_module', modules)
modules=sock.execute(db, uid, pwd, 'ir.module.module', 'search', [('name', '=', 'magentoerpconnect', )])
sock.execute(db, uid, pwd, 'ir.module.module', 'button_upgrade', modules)
sock.execute(db, uid, pwd, 'base.module.upgrade', 'upgrade_module', modules)
# In order to safely refresh mappings, delete the lines from the magento referential
line_ids=sock.execute(db, uid, pwd, 'external.mapping.line', 'search', [('mapping_id.referential_id', '=', 1)])
sock.execute(db, uid, pwd, 'external.mapping.line', 'unlink', line_ids)
HEREDOC


sudo -u $test_user psql -c "update external_referential set version_id=1, type_name='Magento', location='http://localhost:80/'" $test_db
sudo -u $test_user psql -c "update external_mappinglines_template set version_id=1" $test_db
# Search the templates for existing mappings
#sudo -u $test_user psql -c "update external_mapping set key_for_external_id = 'attribute_id' where external_list_method = 'ol_catalog_product_attribute.list';"  $test_db
sudo -u $test_user psql -c "delete from external_mapping where id = 9;" $test_db
sudo -u $test_user psql -c "update external_mapping set template_id = (select id from external_mapping_template where external_mapping.external_key_name = external_mapping_template.key_for_external_id);"  $test_db
sudo -u $test_user psql -c "update sale_shop set type_name = 'Magento' where id > 1;"  $test_db
sudo -u $test_user psql -c "update ir_model_data set referential_id = external_referential_id where external_referential_id is not NULL;"  $test_db
sudo -u $test_user psql -c "delete from ir_model_data where name like 'product_product/%' and module like 'extref/%';" $test_db
